import React, { useState } from 'react'
import { MessageSquare, Send, Phone, Mail, Bell, Clock, User, AlertTriangle } from 'lucide-react'

const ParentNotifications: React.FC = () => {
  const [activeTab, setActiveTab] = useState('messages')
  const [newMessage, setNewMessage] = useState('')

  const messages = [
    {
      id: 1,
      from: 'C√¥ Nguy·ªÖn Th·ªã Lan',
      subject: 'B√°o c√°o ti·∫øn b·ªô c·ªßa b√© An',
      message: 'H√¥m nay b√© An c√≥ m·ªôt ng√†y h·ªçc r·∫•t tuy·ªát v·ªùi! B√© tham gia t√≠ch c·ª±c v√†o gi·ªù ƒë·ªçc s√°ch v√† c√≥ ti·∫øn b·ªô ƒë√°ng k·ªÉ trong giao ti·∫øp v·ªõi b·∫°n b√®.',
      timestamp: '2 gi·ªù tr∆∞·ªõc',
      read: false,
      type: 'message'
    },
    {
      id: 2,
      from: 'H·ªá th·ªëng c·∫£nh b√°o',
      subject: 'C·∫£nh b√°o leo tr√®o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω',
      message: 'C·∫£nh b√°o leo tr√®o t·ª´ s√¢n ch∆°i ƒë√£ ƒë∆∞·ª£c xem x√©t v√† ƒë√°nh d·∫•u ƒë√£ gi·∫£i quy·∫øt. B√© An ƒë√£ ƒë∆∞·ª£c gi√°m s√°t an to√†n trong gi·ªù ch∆°i.',
      timestamp: '4 gi·ªù tr∆∞·ªõc',
      read: true,
      type: 'alert'
    },
    {
      id: 3,
      from: 'Ban gi√°m hi·ªáu',
      subject: 'B√°o c√°o tu·∫ßn ƒë√£ c√≥',
      message: 'B√°o c√°o h√†nh vi h√†ng tu·∫ßn c·ªßa con em ƒë√£ s·∫µn s√†ng. B·∫°n c√≥ th·ªÉ xem trong ph·∫ßn B√°o c√°o.',
      timestamp: '1 ng√†y tr∆∞·ªõc',
      read: true,
      type: 'notification'
    },
    {
      id: 4,
      from: 'C√¥ Nguy·ªÖn Th·ªã Lan',
      subject: 'Nh·∫Øc nh·ªü ƒë√≥n con',
      message: 'Nh·∫Øc nh·ªü th√¢n thi·ªán r·∫±ng gi·ªù ƒë√≥n con h√¥m nay l√† 15:30. B√© An s·∫Ω ch·ªù ·ªü l·ªõp h·ªçc ch√≠nh.',
      timestamp: '2 ng√†y tr∆∞·ªõc',
      read: true,
      type: 'message'
    }
  ]

  const notifications = [
    {
      id: 1,
      title: 'C·∫£nh b√°o m·ª©c ƒë·ªô cao',
      message: 'Ph√°t hi·ªán h√†nh vi leo tr√®o t·∫°i khu v·ª±c s√¢n ch∆°i',
      timestamp: '1 gi·ªù tr∆∞·ªõc',
      priority: 'high',
      read: false
    },
    {
      id: 2,
      title: 'B√°o c√°o tu·∫ßn s·∫µn s√†ng',
      message: 'Ph√¢n t√≠ch h√†nh vi h√†ng tu·∫ßn c·ªßa con em ƒë√£ c√≥',
      timestamp: '3 gi·ªù tr∆∞·ªõc',
      priority: 'medium',
      read: false
    },
    {
      id: 3,
      title: 'C·∫≠p nh·∫≠t h·ªá th·ªëng',
      message: 'B·∫£o tr√¨ h·ªá th·ªëng camera ƒë√£ ho√†n th√†nh th√†nh c√¥ng',
      timestamp: '6 gi·ªù tr∆∞·ªõc',
      priority: 'low',
      read: true
    }
  ]

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-danger-100 text-danger-700'
      case 'medium': return 'bg-warning-100 text-warning-700'
      case 'low': return 'bg-gray-100 text-gray-700'
      default: return 'bg-gray-100 text-gray-700'
    }
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'message': return <MessageSquare className="w-4 h-4" />
      case 'alert': return <Bell className="w-4 h-4" />
      case 'notification': return <Mail className="w-4 h-4" />
      default: return <Mail className="w-4 h-4" />
    }
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-2xl p-6">
        <h1 className="text-2xl font-bold mb-2">üí¨ Th√¥ng b√°o & Tin nh·∫Øn</h1>
        <p className="text-green-100">K·∫øt n·ªëi v·ªõi gi√°o vi√™n v√† nh·∫≠n c·∫≠p nh·∫≠t quan tr·ªçng</p>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('messages')}
            className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${activeTab === 'messages'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
          >
            <MessageSquare className="w-4 h-4" />
            <span>Tin nh·∫Øn</span>
          </button>
          <button
            onClick={() => setActiveTab('notifications')}
            className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${activeTab === 'notifications'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
          >
            <Bell className="w-4 h-4" />
            <span>Th√¥ng b√°o</span>
          </button>
        </nav>
      </div>

      {activeTab === 'messages' && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Message List */}
          <section className="lg:col-span-2 space-y-4">
            {messages.map((message) => (
              <article key={message.id} className={`card cursor-pointer transition-colors hover:bg-gray-50 ${!message.read ? 'border-blue-200 bg-blue-50' : ''
                }`}>
                <div className="flex items-start space-x-4">
                  <div className="flex-shrink-0">
                    <div className="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                      {getTypeIcon(message.type)}
                    </div>
                  </div>

                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-2">
                        <h3 className="text-sm font-medium text-gray-900">{message.from}</h3>
                        {!message.read && (
                          <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        )}
                      </div>
                      <div className="flex items-center space-x-2 text-xs text-gray-500">
                        <Clock className="w-3 h-3" />
                        <span>{message.timestamp}</span>
                      </div>
                    </div>

                    <h4 className="text-sm font-medium text-gray-900 mt-1">{message.subject}</h4>
                    <p className="text-sm text-gray-600 mt-1 line-clamp-2">{message.message}</p>
                  </div>
                </div>
              </article>
            ))}
          </section>

          {/* Chat/Compose */}
          <aside className="space-y-6">
            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">üìù G·ª≠i tin nh·∫Øn</h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">G·ª≠i ƒë·∫øn</label>
                  <select className="input-field" title="Ch·ªçn ng∆∞·ªùi nh·∫≠n tin nh·∫Øn">
                    <option>C√¥ Nguy·ªÖn Th·ªã Lan</option>
                    <option>Ban gi√°m hi·ªáu</option>
                    <option>Hi·ªáu tr∆∞·ªüng</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ti√™u ƒë·ªÅ</label>
                  <input type="text" className="input-field" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ" />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">N·ªôi dung</label>
                  <textarea
                    className="input-field"
                    rows={4}
                    placeholder="Nh·∫≠p n·ªôi dung tin nh·∫Øn t·∫°i ƒë√¢y..."
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                  />
                </div>

                <button className="w-full btn-primary flex items-center justify-center space-x-2">
                  <Send className="w-4 h-4" />
                  <span>G·ª≠i tin nh·∫Øn</span>
                </button>
              </div>
            </div>

            <div className="card">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">‚ö° Thao t√°c nhanh</h3>

              <div className="space-y-3">
                <button className="w-full p-3 bg-blue-50 hover:bg-blue-100 rounded-lg text-left transition-colors">
                  <div className="flex items-center space-x-3">
                    <Phone className="w-5 h-5 text-blue-600" />
                    <div>
                      <p className="text-sm font-medium text-blue-900">Y√™u c·∫ßu g·ªçi ƒëi·ªán</p>
                      <p className="text-xs text-blue-600">L√™n l·ªãch cu·ªôc g·ªçi</p>
                    </div>
                  </div>
                </button>

                <button className="w-full p-3 bg-yellow-50 hover:bg-yellow-100 rounded-lg text-left transition-colors">
                  <div className="flex items-center space-x-3">
                    <AlertTriangle className="w-5 h-5 text-yellow-600" />
                    <div>
                      <p className="text-sm font-medium text-yellow-900">B√°o c√°o v·∫•n ƒë·ªÅ</p>
                      <p className="text-xs text-yellow-600">B√°o c√°o m·ªëi quan t√¢m</p>
                    </div>
                  </div>
                </button>

                <button className="w-full p-3 bg-green-50 hover:bg-green-100 rounded-lg text-left transition-colors">
                  <div className="flex items-center space-x-3">
                    <MessageSquare className="w-5 h-5 text-green-600" />
                    <div>
                      <p className="text-sm font-medium text-green-900">Tin nh·∫Øn nhanh</p>
                      <p className="text-xs text-green-600">G·ª≠i tin nh·∫Øn nhanh</p>
                    </div>
                  </div>
                </button>
              </div>
            </div>
          </aside>
        </div>
      )}

      {activeTab === 'notifications' && (
        <div className="space-y-4">
          {notifications.map((notification) => (
            <article key={notification.id} className={`card cursor-pointer transition-colors hover:bg-gray-50 ${!notification.read ? 'border-blue-200 bg-blue-50' : ''
              }`}>
              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${notification.priority === 'high' ? 'bg-red-100' :
                      notification.priority === 'medium' ? 'bg-yellow-100' :
                        'bg-gray-100'
                    }`}>
                    <Bell className={`w-5 h-5 ${notification.priority === 'high' ? 'text-red-600' :
                        notification.priority === 'medium' ? 'text-yellow-600' :
                          'text-gray-600'
                      }`} />
                  </div>
                </div>

                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <h3 className="text-sm font-medium text-gray-900">{notification.title}</h3>
                      {!notification.read && (
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      )}
                    </div>
                    <div className="flex items-center space-x-2 text-xs text-gray-500">
                      <Clock className="w-3 h-3" />
                      <span>{notification.timestamp}</span>
                    </div>
                  </div>

                  <p className="text-sm text-gray-600 mt-1">{notification.message}</p>

                  <div className="mt-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${notification.priority === 'high' ? 'bg-red-100 text-red-700' :
                        notification.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                      }`}>
                      M·ª©c ƒë·ªô {notification.priority === 'high' ? 'cao' : notification.priority === 'medium' ? 'trung b√¨nh' : 'th·∫•p'}
                    </span>
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      )}
    </div>
  )
}

export default ParentNotifications
