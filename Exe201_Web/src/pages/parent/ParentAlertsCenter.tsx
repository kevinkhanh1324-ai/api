import React, { useState } from 'react'
import { AlertTriangle, Clock, MapPin, Camera, Filter, CheckCircle, X, Search } from 'lucide-react'

const ParentAlertsCenter: React.FC = () => {
  const [filterType, setFilterType] = useState('all')
  const [filterDate, setFilterDate] = useState('today')

  const alerts = [
    {
      id: 1,
      type: 'Leo tr√®o',
      severity: 'Cao',
      time: '10:30',
      date: '2024-01-15',
      location: 'S√¢n ch∆°i',
      description: 'B√© ƒë√£ leo l√™n thi·∫øt b·ªã ch∆°i kh√¥ng an to√†n t·∫°i khu v·ª±c s√¢n ch∆°i',
      status: 'pending',
      hasMedia: true,
      confirmed: null
    },
    {
      id: 2,
      type: 'Ra kh·ªèi v√πng an to√†n',
      severity: 'Trung b√¨nh',
      time: '9:45',
      date: '2024-01-15',
      location: 'H√†nh lang',
      description: 'B√© ƒë√£ di chuy·ªÉn ra ngo√†i khu v·ª±c ƒë∆∞·ª£c ph√©p trong gi·ªù h·ªçc',
      status: 'confirmed',
      hasMedia: false,
      confirmed: true
    },
    {
      id: 3,
      type: 'Nguy c∆° va ch·∫°m',
      severity: 'Cao',
      time: '9:15',
      date: '2024-01-15',
      location: 'Ph√≤ng h·ªçc A',
      description: 'Ph√°t hi·ªán nguy c∆° va ch·∫°m v·ªõi b·∫°n kh√°c trong l·ªõp h·ªçc',
      status: 'resolved',
      hasMedia: true,
      confirmed: false
    },
    {
      id: 4,
      type: 'Lang thang',
      severity: 'Th·∫•p',
      time: '8:30',
      date: '2024-01-14',
      location: 'Ph√≤ng ƒÉn',
      description: 'B√© c√≥ bi·ªÉu hi·ªán lang thang trong gi·ªù ƒÉn',
      status: 'confirmed',
      hasMedia: false,
      confirmed: true
    }
  ]

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Cao': return 'bg-red-100 text-red-700 border-red-200'
      case 'Trung b√¨nh': return 'bg-yellow-100 text-yellow-700 border-yellow-200'
      case 'Th·∫•p': return 'bg-gray-100 text-gray-700 border-gray-200'
      default: return 'bg-gray-100 text-gray-700 border-gray-200'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-orange-100 text-orange-700 border-orange-200'
      case 'confirmed': return 'bg-blue-100 text-blue-700 border-blue-200'
      case 'resolved': return 'bg-green-100 text-green-700 border-green-200'
      default: return 'bg-gray-100 text-gray-700 border-gray-200'
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return 'Ch·ªù x·ª≠ l√Ω'
      case 'confirmed': return 'ƒê√£ x√°c nh·∫≠n'
      case 'resolved': return 'ƒê√£ gi·∫£i quy·∫øt'
      default: return status
    }
  }

  return (
    <div className="space-y-6 animate-fade-in">
      {/* Header */}
      <div className="bg-gradient-to-r from-orange-500 to-red-500 text-white rounded-2xl p-6">
        <h1 className="text-2xl font-bold mb-2">üö® Trung t√¢m c·∫£nh b√°o</h1>
        <p className="text-orange-100">Theo d√µi v√† qu·∫£n l√Ω c√°c c·∫£nh b√°o an to√†n c·ªßa con em</p>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="card bg-gradient-to-br from-red-50 to-red-100 border-red-200">
          <div className="text-center">
            <div className="text-2xl font-bold text-red-700">3</div>
            <div className="text-sm text-red-600">M·ª©c ƒë·ªô cao</div>
          </div>
        </div>
        <div className="card bg-gradient-to-br from-yellow-50 to-yellow-100 border-yellow-200">
          <div className="text-center">
            <div className="text-2xl font-bold text-yellow-700">5</div>
            <div className="text-sm text-yellow-600">M·ª©c ƒë·ªô trung b√¨nh</div>
          </div>
        </div>
        <div className="card bg-gradient-to-br from-gray-50 to-gray-100 border-gray-200">
          <div className="text-center">
            <div className="text-2xl font-bold text-gray-700">2</div>
            <div className="text-sm text-gray-600">M·ª©c ƒë·ªô th·∫•p</div>
          </div>
        </div>
        <div className="card bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <div className="text-center">
            <div className="text-2xl font-bold text-green-700">8</div>
            <div className="text-sm text-green-600">ƒê√£ x·ª≠ l√Ω h√¥m nay</div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-bold text-gray-900">üîç B·ªô l·ªçc</h3>
          <Filter className="w-5 h-5 text-gray-400" />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Lo·∫°i c·∫£nh b√°o</label>
            <select
              className="input-field"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
              title="Ch·ªçn lo·∫°i c·∫£nh b√°o ƒë·ªÉ l·ªçc"
            >
              <option value="all">T·∫•t c·∫£ lo·∫°i</option>
              <option value="climbing">Leo tr√®o</option>
              <option value="out-of-zone">Ra kh·ªèi v√πng an to√†n</option>
              <option value="collision">Nguy c∆° va ch·∫°m</option>
              <option value="wandering">Lang thang</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Kho·∫£ng th·ªùi gian</label>
            <select
              className="input-field"
              value={filterDate}
              onChange={(e) => setFilterDate(e.target.value)}
              title="Ch·ªçn kho·∫£ng th·ªùi gian ƒë·ªÉ l·ªçc"
            >
              <option value="today">H√¥m nay</option>
              <option value="week">Tu·∫ßn n√†y</option>
              <option value="month">Th√°ng n√†y</option>
              <option value="all">T·∫•t c·∫£</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">M·ª©c ƒë·ªô</label>
            <select className="input-field" title="Ch·ªçn m·ª©c ƒë·ªô nghi√™m tr·ªçng">
              <option value="all">T·∫•t c·∫£ m·ª©c ƒë·ªô</option>
              <option value="high">Cao</option>
              <option value="medium">Trung b√¨nh</option>
              <option value="low">Th·∫•p</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">Tr·∫°ng th√°i</label>
            <select className="input-field" title="Ch·ªçn tr·∫°ng th√°i x·ª≠ l√Ω">
              <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
              <option value="pending">Ch·ªù x·ª≠ l√Ω</option>
              <option value="confirmed">ƒê√£ x√°c nh·∫≠n</option>
              <option value="resolved">ƒê√£ gi·∫£i quy·∫øt</option>
            </select>
          </div>
        </div>
      </div>

      {/* Alerts List */}
      <div className="space-y-4">
        {alerts.map((alert) => (
          <div key={alert.id} className="card hover:shadow-xl transition-all duration-200">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-3 mb-3">
                  <AlertTriangle className={`w-5 h-5 ${alert.severity === 'Cao' ? 'text-red-500' :
                      alert.severity === 'Trung b√¨nh' ? 'text-yellow-500' :
                        'text-gray-500'
                    }`} />
                  <h4 className="text-lg font-bold text-gray-900">{alert.type}</h4>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(alert.severity)}`}>
                    {alert.severity}
                  </span>
                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(alert.status)}`}>
                    {getStatusText(alert.status)}
                  </span>
                </div>

                <p className="text-gray-600 mb-3 leading-relaxed">{alert.description}</p>

                <div className="flex items-center space-x-6 text-sm text-gray-500">
                  <div className="flex items-center space-x-2">
                    <Clock className="w-4 h-4" />
                    <span>{alert.time} - {new Date(alert.date).toLocaleDateString('vi-VN')}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <MapPin className="w-4 h-4" />
                    <span>{alert.location}</span>
                  </div>
                  {alert.hasMedia && (
                    <div className="flex items-center space-x-2">
                      <Camera className="w-4 h-4" />
                      <span>C√≥ h√¨nh ·∫£nh</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex items-center space-x-2 ml-4">
                {alert.hasMedia && (
                  <button className="btn-secondary flex items-center space-x-2">
                    <Camera className="w-4 h-4" />
                    <span>Xem h√¨nh ·∫£nh</span>
                  </button>
                )}
                <button className="btn-primary">
                  Xem chi ti·∫øt
                </button>
              </div>
            </div>

            {alert.status === 'pending' && (
              <div className="mt-4 pt-4 border-t border-gray-200 bg-gray-50 -mx-6 -mb-6 px-6 py-4 rounded-b-xl">
                <div className="flex items-center justify-between mb-3">
                  <p className="text-sm font-medium text-gray-700">X√°c nh·∫≠n c·∫£nh b√°o v√† th√™m ghi ch√∫:</p>
                  <div className="flex items-center space-x-2">
                    <button className="flex items-center space-x-2 px-4 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors">
                      <CheckCircle className="w-4 h-4" />
                      <span>X√°c nh·∫≠n ƒë√∫ng</span>
                    </button>
                    <button className="flex items-center space-x-2 px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors">
                      <X className="w-4 h-4" />
                      <span>C·∫£nh b√°o sai</span>
                    </button>
                  </div>
                </div>
                <textarea
                  className="w-full p-3 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Th√™m ghi ch√∫ v·ªÅ c·∫£nh b√°o n√†y..."
                  rows={2}
                  title="Th√™m ghi ch√∫ v·ªÅ c·∫£nh b√°o"
                />
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="card">
        <h3 className="text-lg font-bold text-gray-900 mb-4">‚ö° Thao t√°c nhanh</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button className="p-4 bg-blue-50 hover:bg-blue-100 rounded-xl text-center transition-colors group">
            <CheckCircle className="w-8 h-8 text-blue-600 mx-auto mb-2 group-hover:scale-110 transition-transform" />
            <span className="text-sm font-medium text-blue-700">ƒê√°nh d·∫•u t·∫•t c·∫£ ƒë√£ xem</span>
          </button>

          <button className="p-4 bg-purple-50 hover:bg-purple-100 rounded-xl text-center transition-colors group">
            <Search className="w-8 h-8 text-purple-600 mx-auto mb-2 group-hover:scale-110 transition-transform" />
            <span className="text-sm font-medium text-purple-700">T√¨m ki·∫øm n√¢ng cao</span>
          </button>

          <button className="p-4 bg-green-50 hover:bg-green-100 rounded-xl text-center transition-colors group">
            <Filter className="w-8 h-8 text-green-600 mx-auto mb-2 group-hover:scale-110 transition-transform" />
            <span className="text-sm font-medium text-green-700">Xu·∫•t b√°o c√°o</span>
          </button>
        </div>
      </div>
    </div>
  )
}

export default ParentAlertsCenter
